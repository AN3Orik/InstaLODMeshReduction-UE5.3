/**
 * InstaLODOptimizeTool.h (InstaLOD)
 *
 * Copyright 2016-2019 InstaLOD GmbH - All Rights Reserved.
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * This file and all it's contents are proprietary and confidential.
 *
 * @file InstaLODOptimizeTool.h
 * @copyright 2016-2019 InstaLOD GmbH. All rights reserved.
 * @section License
 */

#pragma once

#include "CoreMinimal.h"
#include "Tools/InstaLODBaseTool.h"
#include "InstaLODOptimizeTool.generated.h"

#define INSTALOD_SKELETON_OPTIMIZE

UCLASS(Config=InstaLOD)
class INSTALODUI_API UInstaLODOptimizeTool : public UInstaLODBaseTool
{
	GENERATED_BODY()

	/// VARIABLES ///


	/************************************************************************/
	/* Settings                                                             */
	/************************************************************************/

public:

	virtual void OnNewSelection() override;

	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Automatic Quality"), Category = "Settings")
	EInstaLODImportance AutomaticQuality = EInstaLODImportance::InstaLOD_OFF;

	/** The amount of polygons in percent of the output mesh in relation to the input mesh polygon count. */
	UPROPERTY(Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionHides, DisplayName = "Percent Triangles", UIMin = 0.0f, UIMax = 100.0f, ClampMin = 0.0f, ClampMax = 100.0f, RadioButton), Category = "Settings")
	float PercentTriangles = 50.0f;

	bool bUsePercentTriangles = true;

	/** The absolute amount of polygons for the target mesh. */
	UPROPERTY(Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionHides, DisplayName = "Absolute Triangles", ClampMin = 4, RadioButton), Category = "Settings")
	int32 AbsoluteTriangles = 4;

	bool bUseAbsoluteTriangles = false;

	/** The target screen size for the optimization in pixels. */
	UPROPERTY(Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionHides, DisplayName = "Screen Size In Pixels", ClampMin = 32, ClampMax = 1024, RadioButton), Category = "Settings")
	int32 ScreenSizeInPixels = 300;

	bool bUseScreenSizeInPixels = false;

	/** Controls the maximum allowed mesh error. The optimizer stops before exceeding this value. */
	UPROPERTY(Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionHides, DisplayName = "Maximum Deviation", NoSpinbox, UIMin = 0.0f, UIMax = 25.0f, ClampMin = 0.0f, ClampMax = 25.0f), Category = "Settings")
	float MaximumDeviation = 0.0f;


	/************************************************************************/
	/* Feature Importance                                                   */
	/************************************************************************/

private:

	/** Determines importance of weights generated by evaluating the boundaries on the geometry. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Boundary Importance"), Category = "Feature Importance")
	EInstaLODImportance BoundaryImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the UV space. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Texture Importance"), Category = "Feature Importance")
	EInstaLODImportance TextureImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the tangent space. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Shading Importance"), Category = "Feature Importance")
	EInstaLODImportance ShadingImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the geometry. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Silhouette Importance"), Category = "Feature Importance")
	EInstaLODImportance SilhouetteImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the skeleton and vertex bone influences. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Skinning Importance", EditCondition = "bSkeletalMeshsSelected"), Category = "Feature Importance")
	EInstaLODImportance SkinningImportance = EInstaLODImportance::InstaLOD_Normal;
		
	/************************************************************************/
	/* Normal Recalculation                                                 */
	/************************************************************************/

	/** Recalculates the normals of the mesh. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Recalculate Normals"), Category = "Normal Recalculation")
	bool bRecalculateNormals = false;

	/** When recalculating normals: smooth faces if the normal angle is below this value (in degrees). */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Hard Angle Threshold", UIMin = 0.0f, UIMax = 180.0f, ClampMin = 0.0f, ClampMax = 180.0f), Category = "Normal Recalculation")
	float HardAngleThreshold = 80.0f;
	 
	/************************************************************************/
	/* Skeleton Optimization                                                */
	/************************************************************************/

	/** This is used to bake the current default Pose of the skeletal mesh. */
	UPROPERTY(EditAnywhere, meta = (DisplayName = "Bake Pose", EditCondition = "bSingleSkeletalMeshSelected"), Category = "Skeleton Optimization")
	class UAnimSequence* BakePose;

	/** Leaf bones with a distance to their parent under the specified threshold will be culled. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Leaf Bone Weld Distance", EditCondition = "bSingleSkeletalMeshSelected", UIMin = 0.0f, UIMax = 100.0f, ClampMin = 0.0f, ClampMax = 100.0f), Category = "Skeleton Optimization")
	float LeafBoneWeldDistance = 0.0f;

	/** Bones that are below the specified leven in the hierarchy will be removed. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Maximum Bone Depth", EditCondition = "bSingleSkeletalMeshSelected", UIMin = 0, UIMax = 64, ClampMin =0, ClampMax = 64), Category = "Skeleton Optimization")
	int32 MaximumBoneDepth = 0;

	/** The maximum amount of bone influences per vertex. If a vertex references more bones than allowed, the lowest bone influence will be removed first. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Max Influence Per Vertex", EditCondition = "bSingleSkeletalMeshSelected", UIMin = 0, UIMax = 32, ClampMin = 0, ClampMax = 32), Category = "Skeleton Optimization")
	int32 MaxInfluencePerVertex = 0;

	/** Influences that fall below the threshold will be removed. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Min Influence Threshold", EditCondition = "bSingleSkeletalMeshSelected", UIMin = 0.0f, UIMax = 1.0f, ClampMin = 0.0f, ClampMax = 1.0f), Category = "Skeleton Optimization")
	float MinInfluenceThreshold = 0.0f;

	/** Joint names matching the specified regular expression will not be culled. The ignore joint parent hierarchy will also be preserved. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Ignore Joint Reg Ex", EditCondition = "bSingleSkeletalMeshSelected"), Category = "Skeleton Optimization")
	FString IgnoreJointRegEx = "";
	
	/************************************************************************/
	/* Vertex Welding and Mesh Healing                                      */
	/************************************************************************/

	/** Welding distance threshold. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Welding Distance", UIMin = 0.0f, UIMax = 10.0f), Category = "Vertex Welding and Mesh Healing")
	float WeldingDistance = 0.0f;

	/** If set to a value > 0, automatically heals T-Junctions if the vertex-edge distance is below the specified threshold. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "T-Junction Healing Distance", UIMin = 0.0f, UIMax = 10.0f), Category = "Vertex Welding and Mesh Healing")
	float TJunctionHealingDistance = 0.0f;

	/************************************************************************/
	/* Advanced							                                    */
	/************************************************************************/

	/** Prevents optimization of split vertices. This is useful if UV and normal splits need to be preserved as is. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Lock Splits"), Category = "Advanced")
	bool bLockSplits = false;

	/** Prevents optimization of vertices on the mesh boundary. This is useful if the mesh contains holes that need to be preserved as is. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Lock Boundaries"), Category = "Advanced")
	bool bLockBoundaries = false;

	/** Prevents topological violations. Disabling can cause holes, but can enable better optimizations for low poly models. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Protect Splits"), Category = "Advanced")
	bool bProtectSplits = true;

	/** Prevents vertices on mesh boundaries from moving into the surface. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Protect Boundaries"), Category = "Advanced")
	bool bProtectBoundaries = true;

	/** Enable optimal placement of vertices to reduce mesh error. If disabled vertices will always move along edges. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Optimal Placement"), Category = "Advanced")
	bool bOptimalPlacement = true;

	/** Enables normalization of the mesh scale to fit a 1000u bounding sphere. When using NormalizeMeshScale, MaxDeviation is specified as a percentage value. This should be enabled when automatically processing data with unpredictable scene scales. Otherwise, it is recommended to use UnitScaleFactor. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Normalize Mesh Scale"), Category = "Advanced")
	bool bNormalizeMeshScale = false;

	/** Enables the use of vertex colors as optimizer vertex weights of the input mesh. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Vertex Colors As Optimizer Weights"), Category = "Advanced")
	bool bVertexColorsAsOptimizerWeights = false;

	/** Makes the algorithm deterministic at the cost of speed. */
	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Deterministic"), Category = "Advanced")
	bool bDeterministic = false;

public:
	/************************************************************************/
	/* Mesh Editor Reduction Settings	                                    */
	/************************************************************************/

	UPROPERTY(Config, EditAnywhere, meta = (DisplayName = "Reduction Settings"), Category = "Mesh Editor Reduction Settings")
	bool bIsMeshReductionSettingsEnabled = false;

private:
	/************************************************************************/
	/* Internal Use                                                         */
	/************************************************************************/

	/** Row Index for the Settings Rows. */
	UPROPERTY(Config)
	int32 SettingsCheckBoxIndex = 0;

	InstaLOD::IOptimizeOperation *Operation;
	InstaLOD::OptimizeResult OperationResult;

	/// FUNCTIONS ///

public:

	UInstaLODOptimizeTool();

	/** Returns current Settings Check Box Index. */
	int32 GetActiveSettingsIndex() const {
		return SettingsCheckBoxIndex;
	}

	/** Sets the Current Settings Index. */
	void SetActiveSettingsIndex(int32 NewIndex, bool bForceSave = true);

	virtual class UAnimSequence* GetBakePose() override {
		return BakePose;
	}

	/** Start - UInstaLODBaseTool Interface */
	virtual void OnMeshOperationExecute(bool bIsAsynchronous) override;
	virtual void DeallocMeshOperation() override;
	virtual bool IsMeshOperationSuccessful() const override;

	virtual bool ReadSettingsFromJSONObject(const TSharedPtr<FJsonObject>& JsonObject) override;
	virtual FText GetFriendlyName() const override;
	virtual FText GetComboBoxItemName() const override;
	virtual FText GetOperationInformation() const override;
	virtual int32 GetOrderId() const override;
	virtual FSkeletalMeshOptimizationSettings GetSkeletalMeshOptimizationSettings(const int32 BaseLOD);
	virtual void ResetSettings() override;
	/** End - UInstaLODBaseTool Interface */

private:

	InstaLOD::OptimizeSettings GetOptimizeSettings();
};
