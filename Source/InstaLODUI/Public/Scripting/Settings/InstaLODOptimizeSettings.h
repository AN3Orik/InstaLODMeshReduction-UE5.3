/**
 * InstaLODOptimizeSettings.h (InstaLOD)
 *
 * Copyright 2016-2022 InstaLOD GmbH - All Rights Reserved.
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * This file and all it's contents are proprietary and confidential.
 *
 * @file InstaLODOptimizeSettings.h
 * @copyright 2016-2022 InstaLOD GmbH. All rights reserved.
 * @section License
 */

#pragma once
#include "CoreMinimal.h"

#include "Tools/InstaLODBaseTool.h"
#include "InstaLODOptimizeSettings.generated.h"


UCLASS(Config = InstaLOD, BluePrintable)
class UInstaLODOptimizeSettings : public UObject
{
	GENERATED_BODY()
	
public: 

	/************************************************************************/
	/* Settings                                                             */
	/************************************************************************/

	/** Automatically adjusts the quality of the mesh. If enabled, no other option to control the target polygon count is available. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Automatic Quality"), Category = "Settings")
		EInstaLODImportance AutomaticQuality = EInstaLODImportance::InstaLOD_OFF;
		
	/** The amount of polygons in percent of the output mesh in relation to the input mesh polygon count. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionhides, DisplayName = "Percent Triangles", UIMin = 0.0f, UIMax = 100.0f, ClampMin = 0.0f, ClampMax = 100.0f, RadioButton), Category = "Settings")
		float PercentTriangles = 0.0f;

	/** The absolute amount of polygons for the target mesh. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionhides, DisplayName = "Absolute Triangles", ClampMin = 4, RadioButton), Category = "Settings")
		int32 AbsoluteTriangles = 0;

	/** The target screen size for the optimization in pixels. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionhides, DisplayName = "Screen Size In Pixels", ClampMin = 32, ClampMax = 1024, RadioButton), Category = "Settings")
		int32 ScreenSizeInPixels = 0;

	/** Controls the maximum allowed mesh error. The optimizer stops before exceeding this value. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (EditCondition = "AutomaticQuality == EInstaLODImportance::InstaLOD_OFF", EditConditionhides, DisplayName = "Maximum Deviation", NoSpinbox, UIMin = 0.0f, UIMax = 25.0f, ClampMin = 0.0f, ClampMax = 25.0f), Category = "Settings")
		float MaximumDeviation = 0.0f;

	/************************************************************************/
	/* Feature Importance                                                   */
	/************************************************************************/

	/** Determines importance of weights generated by evaluating the boundaries on the geometry. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Boundary Importance"), Category = "\|Feature Importance")
		EInstaLODImportance BoundaryImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the UV space. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Texture Importance"), Category = "\|Feature Importance")
		EInstaLODImportance TextureImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the tangent space. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Shading Importance"), Category = "\|Feature Importance")
		EInstaLODImportance ShadingImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the geometry. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Silhouette Importance"), Category = "\|Feature Importance")
		EInstaLODImportance SilhouetteImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the skeleton and vertex bone influences. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Skinning Importance", EditCondition = "bSkeletalMeshsSelected", EditConditionhides), Category = "\|Feature Importance")
		EInstaLODImportance SkinningImportance = EInstaLODImportance::InstaLOD_Normal;

	/************************************************************************/
	/* Normal Recalculation                                                 */
	/************************************************************************/

	/** Recalculates the normals of the mesh. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Recalculate Normals"), Category = "Normal Recalculation")
		bool bRecalculateNormals = false;

	/** When recalculating normals: smooth faces if the normal angle is below this value (in degrees). */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Hard Angle Threshold", UIMin = 0.0f, UIMax = 180.0f, ClampMin = 0.0f, ClampMax = 180.0f), Category = "Normal Recalculation")
		float HardAngleThreshold = 80.0f;
	
	/************************************************************************/
	/* Vertex Welding and Mesh Healing                                      */
	/************************************************************************/

	/** Welding distance threshold. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Welding Distance", UIMin = 0.0f, UIMax = 10.0f), Category = "Vertex Welding and Mesh Healing")
		float WeldingDistance = 0.0f;

	/** If set to a value > 0, automatically heals T-Junctions if the vertex-edge distance is below the specified threshold. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "T-Junction Healing Distance", UIMin = 0.0f, UIMax = 10.0f), Category = "Vertex Welding and Mesh Healing")
		float TJunctionHealingDistance = 0.0f;
	
	/************************************************************************/
	/* Advanced							                                    */
	/************************************************************************/

	/** Prevents optimization of split vertices. This is useful if UV and normal splits need to be preserved as is. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Lock Splits"), Category = "Advanced")
		bool bLockSplits = false;

	/** Prevents optimization of vertices on the mesh boundary. This is useful if the mesh contains holes that need to be preserved as is. */
	UPROPERTY(BlueprintReadWrite, BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Lock Boundaries"), Category = "Advanced")
		bool bLockBoundaries = false;

	/** Enables the use of vertex colors as optimizer vertex weights of the input mesh. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Vertex Colors As Optimizer Weights"), Category = "Advanced")
		bool bVertexColorsAsOptimizerWeights = false;

	/** Enable optimal placement of vertices to reduce mesh error. If disabled vertices will always move along edges. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Optimal Placement"), Category = "Advanced")
		bool bOptimalPlacement = true;

	/** Prevents topological violations. Disabling can cause holes, but can enable a better optimization for low poly models. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Protect Splits"), Category = "Advanced")
		bool bProtectSplits = true;

	/** Prevents vertices on mesh boundaries from moving into the surface. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Protect Boundaries"), Category = "Advanced")
		bool bProtectBoundaries = true;

	/** Enables normalization of the mesh scale to fit a 250u bounding sphere. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Normalize Mesh Scale"), Category = "Advanced")
		bool bNormalizeMeshScale = false;

	/** Makes the algorithm deterministic at the cost of speed. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Deterministic"), Category = "Advanced")
		bool bDeterministic = false;

	public: 

	InstaLOD::OptimizeSettings GetOptimizeSettings()
	{
		InstaLOD::OptimizeSettings Settings;

		Settings.AutomaticQuality = (InstaLOD::MeshFeatureImportance::Type)AutomaticQuality;
		Settings.PercentTriangles = PercentTriangles / 100.0;
		Settings.AbsoluteTriangles = AbsoluteTriangles;
		Settings.ScreenSizeInPixels = ScreenSizeInPixels;
		Settings.MaxDeviation = MaximumDeviation;
		Settings.BoundaryImportance = (InstaLOD::MeshFeatureImportance::Type)BoundaryImportance;
		Settings.TextureImportance = (InstaLOD::MeshFeatureImportance::Type)TextureImportance;
		Settings.ShadingImportance = (InstaLOD::MeshFeatureImportance::Type)ShadingImportance;
		Settings.SilhouetteImportance = (InstaLOD::MeshFeatureImportance::Type)SilhouetteImportance;
		Settings.SkinningImportance = (InstaLOD::MeshFeatureImportance::Type)SkinningImportance;
		Settings.RecalculateNormals = bRecalculateNormals;
		Settings.HardAngleThreshold = HardAngleThreshold;
		Settings.WeldingThreshold = WeldingDistance;
		Settings.HealTJunctionThreshold = TJunctionHealingDistance;
		Settings.LockSplits = bLockSplits;
		Settings.LockBoundaries = bLockBoundaries;
		Settings.OptimizerVertexWeights = bVertexColorsAsOptimizerWeights;
		Settings.OptimalPlacement = bOptimalPlacement;
		Settings.ProtectBoundaries = bProtectBoundaries;
		Settings.ProtectSplits = bProtectSplits;
		Settings.NormalizeMeshScale = bNormalizeMeshScale;
		Settings.Deterministic = bDeterministic;

		return Settings;
	}
};

