/**
 * InstaLODMaterialMergeSettings.h (InstaLOD)
 *
 * Copyright 2016-2022 InstaLOD GmbH - All Rights Reserved.
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 * This file and all it's contents are proprietary and confidential.
 *
 * @file InstaLODMaterialMergeSettings.h
 * @copyright 2016-2022 InstaLOD GmbH. All rights reserved.
 * @section License
 */

#pragma once

#include "CoreMinimal.h"
#include "Tools/InstaLODMaterialMergeTool.h"
#include "InstaLODMaterialSettings.h"
#include "InstaLODMaterialMergeSettings.generated.h"

UCLASS(BluePrintable, Config = InstaLOD)
class UInstaLODMaterialMergeSettings : public UObject
{
	GENERATED_BODY()

public:

	/************************************************************************/
	/* Settings                                                             */
	/************************************************************************/

#if 0
	/** Mode */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Mode"), Category = "Settings")
		EInstaLODMaterialMergeMode MaterialMergeMode = EInstaLODMaterialMergeMode::InstaLOD_AutoRepack;
#endif
	/** Places duplicate UV Shells referencing same material ID on top of each other to save UV space*/
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Stack Duplicate Shells"), Category = "Settings")
		bool bStackDuplicateShells = true;

	/** Insert UV shell splits for edges that do not share the same vertex normal. This improves the quality when rendering normal maps on normal split heavy geometry  */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Insert Normal Splits"), Category = "Settings")
		bool bInsertNormalSplits = true;

	/** Normalize UV shells according to worldspace scale*/
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Worldspace Normalize"), Category = "Settings")
		bool bWorldspaceNormalizeShells = true;

	/** The minimum distance between two UV shells in pixels. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Gutter Size In Pixels", ClampMin = 1, ClampMax = 64), Category = "Settings")
		int32 GutterSizeInPixels = 5;

	/** Enables super sampling of texture pages. NOTE: super sampling causes an exponential increase in memory usage and processing time. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Super Sampling"), Category = "Settings")
		EInstaLODSuperSampling SuperSampling = EInstaLODSuperSampling::InstaLOD_X2;

	/** Enable to allow shells to be rotated for improved packing. Disabling rotations can cause certain scenarios to be unpackable. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Shell Rotation"), Category = "Settings")
		EInstaLODShellRotation ShellRotation = EInstaLODShellRotation::InstaLOD_Arbitrary;

	/** The input UV channel. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Input UV Set Index", ClampMin = 0, ClampMax = 7), Category = "Settings")
		int32 TextureCoordinateIndexInput = 0;

	/** Creates a basic UV for 0-area triangle to allow copying solid color information. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Generate Zero Area UV"), Category = "Settings")
		bool bGenerateZeroAreaUV = false;

	/** Creates a basic UV for 0-area triangle to allow copying solid color information. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Zero Area UV Threshold", UIMin = 0.0f, UIMax = 1.0f, ClampMin = 0.0f, ClampMax = 1.0f), Category = "Settings")
		float ZeroAreaUVThreshold = UE_KINDA_SMALL_NUMBER;

	/************************************************************************/
	/* Feature Importance                                                   */
	/************************************************************************/

	/** Determines importance of weights generated by evaluating occupied UV space. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "UV Importance"), Category = "Feature Importance")
		EInstaLODImportance UVImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating world space geometry. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Geometric Importance"), Category = "Feature Importance")
		EInstaLODImportance GeometricImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating texture dimensions. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Texture Importance"), Category = "Feature Importance")
		EInstaLODImportance TextureImportance = EInstaLODImportance::InstaLOD_Normal;

	/** Determines importance of weights generated by evaluating the visual importance (raytraced). */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Visual Importance"), Category = "Feature Importance")
		EInstaLODImportance VisualImportance = EInstaLODImportance::InstaLOD_Normal;

	/************************************************************************/
	/* Material																*/
	/************************************************************************/

	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Texture Filter"), Category = "Material")
		EInstaLODTextureFilter TextureFilter = EInstaLODTextureFilter::InstaLOD_Bilinear;

	/************************************************************************/
	/* Advanced							                                    */
	/************************************************************************/

	/** Makes the algorithm deterministic at the cost of speed. */
	UPROPERTY(BlueprintReadWrite, Config, EditAnywhere, meta = (DisplayName = "Deterministic"), Category = "Advanced")
		bool bDeterministic = false;

	InstaLOD::MeshMergeSettings GetMaterialMergeSettings()
	{
		InstaLOD::MeshMergeSettings Settings;

	#if 0
		Settings.Mode = (InstaLOD::MeshMergeMode::Type)MaterialMergeMode;
	#else
		Settings.Mode = InstaLOD::MeshMergeMode::AutoRepack;
	#endif

		Settings.TextureFilter = (InstaLOD::TextureFilter::Type)TextureFilter;
		Settings.SolidifyTexturePages = true;
		Settings.ComputeBinormalPerFragment = true;
		Settings.NormalizeTangentSpacePerFragment = false;
		Settings.GutterSizeInPixels = GutterSizeInPixels;
		Settings.ShellRotation = (InstaLOD::UVPackShellRotation::Type)ShellRotation;
		Settings.SuperSampling = (InstaLOD::SuperSampling::Type)SuperSampling;
		Settings.TexCoordIndexInput = TextureCoordinateIndexInput;

		Settings.GenerateZeroAreaUV = bGenerateZeroAreaUV;
		Settings.ZeroAreaUVThreshold = ZeroAreaUVThreshold;

		Settings.StackDuplicateShells = bStackDuplicateShells;
		Settings.InsertNormalSplits = bInsertNormalSplits;
		Settings.WorldspaceNormalizeShells = bWorldspaceNormalizeShells;

		Settings.UVImportance = (InstaLOD::MeshFeatureImportance::Type)UVImportance;
		Settings.GeometricImportance = (InstaLOD::MeshFeatureImportance::Type)GeometricImportance;
		Settings.TextureImportance = (InstaLOD::MeshFeatureImportance::Type)TextureImportance;
		Settings.VisualImportance = (InstaLOD::MeshFeatureImportance::Type)VisualImportance;

		Settings.Deterministic = bDeterministic;

		return Settings;
	}
};